{"version":3,"sources":["webpack:///./src/lib/prism.js","webpack:///./src/templates/AsmSource.jsx","webpack:///./node_modules/escape-string-regexp/index.js"],"names":["css","NES_PALETTE","get","pathStartRegEx","RegExp","escapeStringRegexp","withPrefix","pageQuery","styled","className","asmSource","data","path","sections","handleClick","useCallback","e","defaultPrevented","clickedAnchor","node","parentNode","nodeName","toLowerCase","findClosestAnchor","target","destination","getAttribute","test","preventDefault","navigate","replace","Layout","noPadding","SEO","title","onClick","map","line","htmlComment","htmlContent","Fragment","key","dangerouslySetInnerHTML","__html","name","href","firaCodeRegular","prism","matchOperatorsRe","module","exports","str","TypeError"],"mappings":"2KAIeA,gBAAf,8OAEaC,IAAYC,IAAI,GAIhBD,IAAYC,IAAI,IAIhBD,IAAYC,IAAI,IAIhBD,IAAYC,IAAI,IAIhBD,IAAYC,IAAI,IAIhBD,IAAYC,IAAI,GAGhBD,IAAYC,IAAI,GAGhBD,IAAYC,IAAI,IAIhBD,IAAYC,IAAI,IAIhBD,IAAYC,IAAI,IAIhBD,IAAYC,IAAI,I,qECvB7B,IAAMC,EAAiB,IAAIC,OAAJ,IAAeC,IAAmBC,qBAAW,OAiKvDC,GAvGEC,6BAxDO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,UACfC,EADqC,EAAXC,KAC1BD,UACAE,EAAmBF,EAAnBE,KAAMC,EAAaH,EAAbG,SAERC,EAAcC,uBAAY,SAACC,GAC/B,IAAIA,EAAEC,iBAAN,CAGA,IAAMC,EAnBV,SAA2BC,GACzB,KAAOA,EAAKC,WAAYD,EAAOA,EAAKC,WAClC,GAAoC,MAAhCD,EAAKE,SAASC,cAChB,OAAOH,EAGX,OAAO,KAaiBI,CAAkBP,EAAEQ,QAC1C,GAAqB,MAAjBN,EAAJ,CAGA,IAAMO,EAAcP,EAAcQ,aAAa,QAC3CvB,EAAewB,KAAKF,KACtBT,EAAEY,iBACFC,mBAASJ,EAAYK,QAAQ3B,EAAgB,WAE9C,IAEH,OACE,kBAAC4B,EAAA,EAAD,CAAQC,WAAS,GACf,kBAACC,EAAA,EAAD,CAAKC,MAAOtB,IACZ,6BAASH,UAAWA,GAClB,gCACE,4BAAKG,IAEP,6BAASuB,QAASrB,GACfD,EAASuB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,YAAtB,OACZ,kBAAC,IAAMC,SAAP,CAAgBC,IAAKJ,GACnB,2BACEK,wBAAyB,CACvBC,QAAWL,GAAe,IAApB,YAGV,6BACE,uBACEM,KAAI,IAAMP,EACVQ,KAAI,KAAOR,EACXH,MAAK,gBAAkBG,GAHzB,KAOA,0BACEK,wBAAyB,CACvBC,QAAWJ,GAAe,IAApB,uBAY1B,4DAAe/B,CAAf,qoCAGwBP,IAAYC,IAAI,IAC3BD,IAAYC,IAAI,IAGrB4C,IA4BkB7C,IAAYC,IAAI,IAC3BD,IAAYC,IAAI,IAkBdD,IAAYC,IAAI,IA8BhBD,IAAYC,IAAI,GAUHD,IAAYC,IAAI,IAM1C6C,GAGkB,c,iCCpLtB,EAAQ,IAER,IAAIC,EAAmB,sBAEvBC,EAAOC,QAAU,SAAUC,GACzB,GAAmB,iBAARA,EACT,MAAM,IAAIC,UAAU,qBAGtB,OAAOD,EAAIrB,QAAQkB,EAAkB","file":"component---src-templates-asm-source-jsx-01cd7319362b643a9863.js","sourcesContent":["import { css } from 'styled-components';\n\nimport NES_PALETTE from './nesPalette';\n\nexport default css`\n  .token {\n    color: ${NES_PALETTE.get(0x08)};\n  }\n\n  .keyword {\n    color: ${NES_PALETTE.get(0x14)};\n  }\n\n  .variable {\n    color: ${NES_PALETTE.get(0x28)};\n  }\n\n  .opcode {\n    color: ${NES_PALETTE.get(0x16)};\n  }\n\n  .string {\n    color: ${NES_PALETTE.get(0x1a)};\n  }\n\n  .decimalnumber {\n    color: ${NES_PALETTE.get(0x03)};\n  }\n  .hexnumber {\n    color: ${NES_PALETTE.get(0x01)};\n  }\n  .binarynumber {\n    color: ${NES_PALETTE.get(0x0c)};\n  }\n\n  .register {\n    color: ${NES_PALETTE.get(0x25)};\n  }\n\n  .directive {\n    color: ${NES_PALETTE.get(0x27)};\n  }\n\n  .comment {\n    color: ${NES_PALETTE.get(0x00)};\n  }\n`;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { graphql, navigate, withPrefix } from 'gatsby';\nimport escapeStringRegexp from 'escape-string-regexp';\n\nimport NES_PALETTE from '../lib/nesPalette';\nimport prism from '../lib/prism';\n\nimport { firaCodeRegular } from '../components/GlobalStyle';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\n\nfunction findClosestAnchor(node) {\n  for (; node.parentNode; node = node.parentNode) {\n    if (node.nodeName.toLowerCase() === 'a') {\n      return node;\n    }\n  }\n  return null;\n}\n\nconst pathStartRegEx = new RegExp(`^${escapeStringRegexp(withPrefix('/'))}`);\n\nconst AsmSourcePage = ({ className, data }) => {\n  const { asmSource } = data; // data.markdownRemark holds our post data\n  const { path, sections } = asmSource;\n\n  const handleClick = useCallback((e) => {\n    if (e.defaultPrevented) {\n      return;\n    }\n    const clickedAnchor = findClosestAnchor(e.target);\n    if (clickedAnchor == null) {\n      return;\n    }\n    const destination = clickedAnchor.getAttribute('href');\n    if (pathStartRegEx.test(destination)) {\n      e.preventDefault();\n      navigate(destination.replace(pathStartRegEx, '/'));\n    }\n  }, []);\n\n  return (\n    <Layout noPadding>\n      <SEO title={path} />\n      <article className={className}>\n        <header>\n          <h3>{path}</h3>\n        </header>\n        <section onClick={handleClick}>\n          {sections.map(({ line, htmlComment, htmlContent }) => (\n            <React.Fragment key={line}>\n              <aside\n                dangerouslySetInnerHTML={{\n                  __html: `${htmlComment || ''}&nbsp;`,\n                }}\n              />\n              <pre>\n                <a\n                  name={`l${line}`}\n                  href={`#l${line}`}\n                  title={`Link to line ${line}`}\n                >\n                  #\n                </a>\n                <code\n                  dangerouslySetInnerHTML={{\n                    __html: `${htmlContent || ''}&nbsp;`,\n                  }}\n                />\n              </pre>\n            </React.Fragment>\n          ))}\n        </section>\n      </article>\n    </Layout>\n  );\n};\n\nexport default styled(AsmSourcePage)`\n  > header {\n    padding: 1rem 4rem;\n    background-color: ${NES_PALETTE.get(0x37)};\n    color: ${NES_PALETTE.get(0x17)};\n\n    h3 {\n      ${firaCodeRegular}\n    }\n  }\n\n  > section {\n    display: grid;\n    grid-template-columns [code-comment] minmax(min-content, 50%) [code-content] minmax(50%, max-content);\n    line-height: 1.3;\n\n    > aside,\n    > pre {\n      position: relative;\n      margin: 0;\n      padding: 0;\n      border: 1px solid transparent;\n      border-radius: 0;\n      box-sizing: border-box;\n    }\n\n    > aside:nth-child(1),\n    > pre:nth-child(2) {\n      padding-top: 1rem;\n    }\n\n    > aside {\n      grid-column: code-comment;\n      padding-left: 4rem;\n      padding-right: 1rem;\n      background-color: ${NES_PALETTE.get(0x20)};\n      color: ${NES_PALETTE.get(0x0f)};\n      word-break: break-word;\n    }\n\n    > pre {\n      grid-column: code-content;\n      padding-left: 1rem;\n      padding-right: 1rem;\n      overflow: visible;\n      white-space: pre-wrap;\n      word-break: break-word;\n      tab-size: 4;\n\n      > a[name][href^=\"#\"] {\n        position: absolute;\n        top: 0;\n        right: 1rem;\n        text-decoration: none;\n        color: ${NES_PALETTE.get(0x25)};\n        transition: opacity 0.1s linear;\n        opacity: 0;\n      }\n\n      &:hover > a[name][href^=\"#\"] {\n        opacity: 1;\n      }\n    }\n  }\n\n  @media (max-width: 800px) {\n    > header {\n      padding-left: 2rem;\n      padding-right: 2rem;\n    }\n\n    > section {\n      display: block;\n\n      > aside,\n      > pre {\n        padding-top: 1rem;\n        padding-bottom: 1rem;\n      }\n\n      > aside {\n        max-width: none;\n        padding-left: 2rem;\n        padding-right: 2rem;\n        color: ${NES_PALETTE.get(0x00)};\n\n        &:before {\n          content: '';\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          pointer-events: none;\n          width: 4px;\n          background-color: ${NES_PALETTE.get(0x10)};\n        }\n      }\n    }\n  }\n\n  ${prism}\n`;\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    asmSource(path: { eq: $path }) {\n      path\n      name\n      raw\n      sections {\n        comment\n        content\n        htmlComment\n        htmlContent\n        line\n      }\n    }\n  }\n`;\n","'use strict';\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  return str.replace(matchOperatorsRe, '\\\\$&');\n};"],"sourceRoot":""}